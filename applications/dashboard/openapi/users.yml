openapi: 3.0.2
info:
x-resourceEvents:
    user:
        x-addon: "dashboard"
        name: "User"
        type: "user"
paths:
    /users:
        get:
            parameters:
                - $ref: "../../dashboard/openapi/parameters.yml#/components/parameters/DateInserted"
                - $ref: "../../dashboard/openapi/parameters.yml#/components/parameters/DateUpdated"
                - name: dateLastActive
                  description: When the user was last active on the community.
                  in: query
                  schema:
                      type: string
                      format: date-filter
                - name: roleID
                  description: Filter by the role ID of a user.
                  in: query
                  schema:
                      type: integer
                - name: roleIDs
                  description: Filter by one of multiple role IDs.
                  in: query
                  schema:
                      type: array
                      items:
                          type: integer
                - name: banned
                  description: Filter by the banned status of a user. Pass true to filter only banned users, and false to exclude banned users.
                  in: query
                  schema:
                      type: boolean
                - name: rankIDs
                  description: Filter by one of multiple rank IDs.
                  in: query
                  schema:
                      type: array
                      items:
                          type: integer
                - name: userID
                  description: Filter by a range or CSV of user IDs.
                  in: query
                  schema:
                      $ref: "../../dashboard/openapi/schemas.yml#/components/schemas/RangeExpression"
                - name: name
                  description: Filter by the user's username.
                  in: query
                  schema:
                      type: string
                - name: email
                  description: Filter by the user's email address.
                  in: query
                  schema:
                      type: string
                - name: query
                  description: Filter by the user's email address or username.
                  in: query
                  schema:
                      type: string
                - name: ipAddresses
                  description: Filter by the user's associated IP addresses
                  in: query
                  schema:
                      items:
                          type: string
                      type: array
                - $ref: "../../dashboard/openapi/parameters.yml#/components/parameters/Page"
                - description: |
                      Desired number of items per page.
                  in: query
                  name: limit
                  schema:
                      type: integer
                      default: 30
                      maximum: 500
                      minimum: 1
                - description: |
                      Token used to fetch next page of results. Cannot be combined with page.
                      Warning: May lead to duplicate results if not sorted by primary key.
                  in: query
                  name: cursor
                  schema:
                      type: string
                - name: sort
                  in: query
                  description: Sort the results.
                  schema:
                      type: string
                      enum:
                          - dateInserted
                          - dateLastActive
                          - name
                          - userID
                          - points
                          - countPosts
                          - -dateInserted
                          - -dateLastActive
                          - -name
                          - -userID
                          - -points
                          - -countPosts
                - name: fields
                  description: >
                      Fields that will be included in the response.
                  in: query
                  schema:
                      items:
                          type: string
                      type: array
                  style: form
                - $ref: "#/components/parameters/UserExpand"
                - $ref: "#/components/parameters/ProfileFieldFilters"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                items:
                                    $ref: "#/components/schemas/User"
                                type: array
                    description: Success
            tags:
                - Users
            summary: List users.
        post:
            responses:
                "201":
                    content:
                        "application/json":
                            schema:
                                $ref: "#/components/schemas/User"
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserPost"
                required: true
            summary: Add a user.
    /users/by-names:
        get:
            parameters:
                - description: >
                      Filter for username. Supports full or partial matching with
                      appended wildcard (e.g. User*).
                  in: query
                  name: name
                  required: true
                  schema:
                      minLength: 1
                      type: string
                - description: >
                      Sort method for results.

                      Must be one of: "countComments", "dateLastActive", "name",
                      "mention".
                  in: query
                  name: order
                  schema:
                      type: string
                      default: name
                      enum:
                          - countComments
                          - dateLastActive
                          - name
                          - mention
                - description: |
                      Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).
                  in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                - description: |
                      Desired number of items per page.
                  in: query
                  name: limit
                  schema:
                      type: integer
                      default: 30
                      maximum: 100
                      minimum: 1
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                items:
                                    $ref: "schemas.yml#/components/schemas/UserFragment"
                                type: array
                    description: Success
            tags:
                - Users
            summary: Search for users by full or partial name matching.
    /users/me:
        get:
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                allOf:
                                    - $ref: "schemas.yml#/components/schemas/UserFragment"
                                    - type: object
                                      properties:
                                          email:
                                              description: The current user's email address.
                                              type: string
                                              format: email
                                          ssoID:
                                              description: The unique ID of the default SSO connection. This will be YOUR user ID.
                                              type: string
                                          isAdmin:
                                              description: Whether or not the user is a global admin.
                                              type: boolean
                                          isSysAdmin:
                                              description: Whether or not the user is a system admin.
                                              type: boolean
                                          permissions:
                                              description: Global permissions available to the current user.
                                              type: array
                                              items:
                                                  type: string
                                          countUnreadNotifications:
                                              description: Total number of unread notifications for the current user.
                                              type: integer
                                          countUnreadConversations:
                                              description: Total number of unread conversations for the current user.
                                              type: integer
                                      required:
                                          - isAdmin
                                          - isSysAdmin
                                          - permissions
                    description: Success
            tags:
                - Users
            summary: Get information about the current user.
    /users/me-counts:
        get:
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    counts:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                name:
                                                    description: Menu counter name
                                                    type: string
                                                count:
                                                    description: Counter value
                                                    type: integer
                                        example:
                                            - name: UnreadNotifications
                                              count: 2
                                            - name: Bookmarks
                                              count: 3
                                required:
                                    - counts
                    description: Success
            tags:
                - Users
            summary: Get information about menu counts for current user.
    /users/register:
        post:
            responses:
                "201":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    email:
                                        description: Email address of the user.
                                        minLength: 0
                                        type: string
                                    name:
                                        description: Name of the user.
                                        minLength: 1
                                        type: string
                                    userID:
                                        description: ID of the user.
                                        type: integer
                                required:
                                    - userID
                                    - name
                                    - email
                                type: object
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                discoveryText:
                                    description: >-
                                        Why does the user wish to join? Only used when the
                                        registration is flagged as SPAM (response code: 202).
                                    type: string
                                email:
                                    description: An email address for this user.
                                    minLength: 1
                                    type: string
                                name:
                                    description: The username.
                                    minLength: 1
                                    type: string
                                password:
                                    description: A password for this user.
                                    minLength: 1
                                    type: string
                            required:
                                - email
                                - name
                                - password
                            type: object
                required: true
            summary: Submit a new user registration.
    /users/request-password:
        post:
            responses:
                "201":
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                email:
                                    description: The email/username of the user.
                                    minLength: 1
                                    type: string
                            required:
                                - email
                            type: object
                required: true
    "/users/{id}":
        delete:
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "204":
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                deleteMethod:
                                    type: string
                                    default: delete
                                    description: The deletion method / strategy.
                                    enum:
                                        - keep
                                        - wipe
                                        - delete
                            type: object
                required: true
            summary: Delete a user.
        get:
            parameters:
                - description: |
                      The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                - description: >
                      Expand associated records using one or more valid field names. A
                      value of "all" will expand all expandable fields.
                  in: query
                  name: expand
                  schema:
                      items:
                          enum:
                              - rank
                              - discoveryText
                              - all
                          type: string
                      type: array
                  style: form
                - description: >
                      Authenticate using a JWT, [role/token](https://success.vanillaforums.com/kb/articles/436-api-role-tokens).
                  in: query
                  name: role-token
                  schema:
                      type: string
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                $ref: "#/components/schemas/User"
                    description: Success
                "403":
                    description: >
                        Forbidden, e.g. expired or invalid role token, role token used with another auth mechanism.
                    content:
                        "application/json":
                            schema:
                                $ref: "responses.yml#/components/schemas/BasicError"
                "404":
                    $ref: "responses.yml#/components/responses/NotFound"
            tags:
                - Users
            summary: Get a user.
        patch:
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                $ref: "#/components/schemas/User"
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserPatch"
                required: true
            summary: Update a user.
    "/users/{id}/ban":
        put:
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    banned:
                                        description: The current banned value.
                                        type: boolean
                                required:
                                    - banned
                                type: object
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                banned:
                                    description: Pass true to ban or false to unban.
                                    type: boolean
                            required:
                                - banned
                            type: object
                required: true
            summary: Ban a user.
    "/users/{id}/confirm-email":
        post:
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    email:
                                        minLength: 1
                                        type: string
                                    emailConfirmed:
                                        type: boolean
                                    userID:
                                        type: integer
                                required:
                                    - userID
                                    - email
                                    - emailConfirmed
                                type: object
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                confirmationCode:
                                    description: Email confirmation code
                                    minLength: 1
                                    type: string
                            required:
                                - confirmationCode
                            type: object
                required: true
            summary: Confirm a users current email address by using a confirmation code
    "/users/{id}/edit":
        get:
            parameters:
                - description: |
                      The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                - description: >
                      Expand associated records using one or more valid field names. A
                      value of "all" will expand all expandable fields.
                  in: query
                  name: expand
                  schema:
                      items:
                          enum:
                              - rank
                              - all
                          type: string
                      type: array
                  style: form
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    bypassSpam:
                                        description: Should submissions from this user bypass SPAM checks?
                                        type: boolean
                                    email:
                                        description: Email address of the user.
                                        minLength: 0
                                        type: string
                                    emailConfirmed:
                                        description: Has the email address for this user been confirmed?
                                        type: boolean
                                    name:
                                        description: Name of the user.
                                        minLength: 1
                                        type: string
                                    photo:
                                        description: Raw photo field value from the user record.
                                        minLength: 0
                                        nullable: true
                                        type: string
                                    userID:
                                        description: ID of the user.
                                        type: integer
                                required:
                                    - userID
                                    - name
                                    - email
                                    - photo
                                    - emailConfirmed
                                    - bypassSpam
                                type: object
                    description: Success
            tags:
                - Users
            summary: Get a user for editing.
    "/users/{id}/hidden":
        put:
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    hidden:
                                        description: Whether not the user is hidden from Online status.
                                        type: boolean
                                required:
                                    - hidden
                                type: object
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                hidden:
                                    description: Whether not the user should be hidden from Online status.
                                    type: boolean
                            required:
                                - hidden
                            type: object
                required: true
            summary: Adjust a user’s Online privacy.
    "/users/{id}/photo":
        delete:
            parameters:
                - description: |
                      The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                - description: >
                      Expand associated records using one or more valid field names. A
                      value of "all" will expand all expandable fields.
                  in: query
                  name: expand
                  schema:
                      items:
                          enum:
                              - rank
                              - all
                          type: string
                      type: array
                  style: form
            responses:
                "204":
                    description: Success
            tags:
                - Users
            summary: Delete a user photo.
        post:
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    photoUrl:
                                        description: URL to the user photo.
                                        minLength: 0
                                        nullable: true
                                        type: string
                                required:
                                    - photoUrl
                                type: object
                    description: Success
            tags:
                - Users
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                photo:
                                    type: string
                                    format: binary
                            required:
                                - photo
                            type: object
                required: true
    /users/{id}/ignored:
        x-addon: ignore
        get:
            summary: Get a user's ignored users.
            tags:
                - Users
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: array
                                items:
                                    allOf:
                                        - $ref: "../../dashboard/openapi/schemas.yml#/components/schemas/UserFragment"
                                        - type: "object"
                                          properties:
                                              dateIgnored:
                                                  type: string
                                                  format: "date-time"
                    description: Success
    /users/leaders:
        get:
            summary: Get user's leaderboard.
            tags:
                - Users
            parameters:
                - description: Leaderboard type ("reputation" => "Reputation points", "posts" => "Discussion/comment posts", "acceptedAnswers" => "Accepted Answers count").
                  in: query
                  name: leaderboardType
                  required: true
                  schema:
                      type: string
                      enum:
                          - reputation
                          - posts
                          - acceptedAnswers
                      default: reputation
                - description: Slot type ("d" = day, "w" = week, "m" = month, "y" = year, "a" = all).
                  in: query
                  name: slotType
                  required: true
                  schema:
                      type: string
                      enum:
                          - d
                          - w
                          - m
                          - y
                          - a
                      default: a
                - description: The numeric ID of a category to limit search results to.
                  in: query
                  name: categoryID
                  required: false
                  schema:
                      type: integer
                - description: The maximum amount of records to be returned.
                  in: query
                  name: limit
                  required: false
                  schema:
                      type: integer
                - description: Specify a range or CSV of included role IDs.
                  in: query
                  name: includedRoleIDs
                  required: false
                  schema:
                      $ref: "../../dashboard/openapi/schemas.yml#/components/schemas/RangeExpression"
                - description: Specify a range or CSV of excluded role IDs.
                  in: query
                  name: excludedRoleIDs
                  required: false
                  schema:
                      $ref: "../../dashboard/openapi/schemas.yml#/components/schemas/RangeExpression"
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        slotType:
                                            description: Slot type ("d" = day, "w" = week, "m" = month, "y" = year, "a" = all).
                                            type: string
                                            enum:
                                                - d
                                                - w
                                                - m
                                                - y
                                                - a
                                        timeSlot:
                                            description: The starting date/time for the requested Slot type.
                                            type: string
                                            format: date-time
                                        source:
                                            description: The score's source (Total, Badges, etc.) for the requested Slot type.
                                            type: string
                                        userID:
                                            description: ID of the user.
                                            type: integer
                                        points:
                                            description: The total number of points the user has accumulated.
                                            type: integer
                                        name:
                                            description: Name of the user.
                                            minLength: 1
                                            type: string
                                        photo:
                                            description: URL to the user photo.
                                            minLength: 0
                                            nullable: true
                                            type: string
                                    required:
                                        - categoryID
                                        - userID
                    description: Success
    "/users/{id}/badges":
        x-addon: badges
        get:
            summary: Get user badges.
            tags:
                - Users
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                - description: |
                      Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).
                  in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      maximum: 100
                      minimum: 1
                - description: |
                      Desired number of items per page.
                  in: query
                  name: limit
                  schema:
                      type: integer
                      default: 30
                      maximum: 100
                      minimum: 1
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/UserBadges"
                                type: array
                    description: Success
    "/users/{id}/rank":
        x-addon: ranks
        put:
            summary: Update the rank of a user.
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                rankID:
                                    description: ID of the user rank.
                                    nullable: true
                                    type: integer
                            required:
                                - rankID
                            type: object
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    rankID:
                                        description: ID of the user rank.
                                        nullable: true
                                        type: integer
                                required:
                                    - rankID
                                type: object
                    description: Success
    "/users/{id}/profile-fields":
        x-hidden: true
        get:
            summary: Get a user's profile fields.
            tags:
                - Users
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                $ref: "#/components/schemas/UserProfileFields"
                    description: Success
        patch:
            summary: Update a user's profile fields.
            tags:
                - Users
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserProfileFields"
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                $ref: "#/components/schemas/UserProfileFields"
                    description: Success

    /users/{id}/reacted:
        get:
            summary: Get a user's posts that have received a certain reaction.
            tags:
                - Users
            parameters:
                - description: The user ID.
                  in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                - description: The reaction to filter by.
                  in: query
                  name: reactionUrlcode
                  required: true
                  schema:
                      type: string
                - description: expand parameters
                  in: query
                  name: expand
                  schema:
                      items:
                          enum:
                              - insertUser
                              - updateUser
                              - reactions
                              - all
                          type: string
                      type: array
                  style: form
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ReactedRecord"
                    description: Success

    /users/bulk-role-assignment:
        x-hidden: true
        patch:
            summary: Update role assignment on multiple users.
            tags:
                - Users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BulkRoleAssignment"
                required: true
            responses:
                "202":
                    $ref: "../../dashboard/openapi/responses.yml#/components/responses/TrackingSlipResponse"
                "204":
                    description: Success
                "403":
                    $ref: "../../dashboard/openapi/responses.yml#/components/responses/PermissionError"
                "408":
                    $ref: "../../dashboard/openapi/responses.yml#/components/responses/LongRunnerResponse"
components:
    parameters:
        UserExpand:
            description: >
                Expand associated records using one or more valid field names. A
                value of "all" will expand all expandable fields.
            in: query
            name: expand
            schema:
                items:
                    enum:
                        - rank
                        - all
                        - profileFields
                        - discoveryText
                    type: string
                type: array
            style: form
        ProfileFieldFilters:
            x-hidden: true
            name: profileFields
            description: Filter by users' profile field values.
            in: query
            schema:
                type: object
                properties:
                    profileFields:
                        type: object

    schemas:
        User:
            properties:
                userID:
                    description: ID of the user.
                    type: integer
                name:
                    description: Name of the user.
                    minLength: 1
                    type: string
                photoUrl:
                    description: URL to the user photo.
                    minLength: 0
                    nullable: true
                    type: string
                email:
                    description: Email address of the user.
                    minLength: 0
                    type: string
                hashMethod:
                    type: string
                    description: Hashing mechanism used for this user's password.
                roles:
                    items:
                        $ref: "schemas.yml#/components/schemas/RoleFragment"
                    type: array
                dateInserted:
                    description: When the user was created.
                    format: date-time
                    type: string
                dateLastActive:
                    description: Time the user was last active.
                    format: date-time
                    nullable: true
                    type: string
                dateUpdated:
                    description: When the user was last updated.
                    format: date-time
                    nullable: true
                    type: string
                points:
                    description: The total number of points the user has accumulated.
                    type: integer
                    default: 0
                emailConfirmed:
                    description: Has the email address for the user been confirmed?
                    type: boolean
                hidden:
                    description: Is this user hiding their online status?
                    type: boolean
                bypassSpam:
                    description: Should submissions from this user bypass SPAM checks?
                    type: boolean
                banned:
                    description: Is the user banned?
                    type: integer
                rank:
                    x-addon: ranks
                    properties:
                        name:
                            description: Name of the rank.
                            minLength: 1
                            type: string
                        rankID:
                            description: Rank ID.
                            type: integer
                        userTitle:
                            description: Label that will display beside the user.
                            minLength: 1
                            type: string
                    required:
                        - rankID
                        - name
                        - userTitle
                    type: object
                rankID:
                    x-addon: ranks
                    description: ID of the user rank.
                    nullable: true
                    type: integer
                showEmail:
                    description: Is the email address visible to other users?
                    type: boolean
                suggestAnswers:
                    description: Should we automatically suggest answers for this user?
                    type: boolean
                    x-feature: "Feature.AISuggestions.Enabled"
                insertIPAddress:
                    description: First IP address of this user. Only visible to site administrators.
                    type: string
                lastIPAddress:
                    description: Last known IP address of this user. Only visible to site administrators.
                    type: string
                countVisits:
                    description: Number of visits the user has made to the site.
                    type: integer
                inviteUserID:
                    description: UserID of the user that invited this user if applicable.
                    type: integer
                    nullable: true
            required:
                - userID
                - name
                - email
                - photoUrl
                - points
                - emailConfirmed
                - showEmail
                - bypassSpam
                - banned
                - dateInserted
                - dateLastActive
                - dateUpdated
            type: object
        UserPatch:
            type: object
            properties:
                bypassSpam:
                    description: Should submissions from this user bypass SPAM checks?
                    type: boolean
                email:
                    description: Email address of the user.
                    minLength: 0
                    type: string
                emailConfirmed:
                    description: Has the email address for this user been confirmed?
                    type: boolean
                showEmail:
                    description: Is the email address visible to other users?
                    type: boolean
                suggestAnswers:
                    description: Should we automatically suggest answers for this user?
                    type: boolean
                    x-feature: "Feature.AISuggestions.Enabled"
                name:
                    description: Name of the user.
                    minLength: 1
                    type: string
                password:
                    description: Password of the user.
                    minLength: 1
                    type: string
                resetPassword:
                    description: Set to true to reset the user's password and send them a notification email.
                    type: boolean
                passwordConfirmation:
                    description: Required when editing your own profile and when a password is associated with the account.
                    type: string
                photo:
                    description: Raw photo field value from the user record.
                    minLength: 0
                    nullable: true
                    type: string
                roleID:
                    description: Roles to set on the user.
                    items:
                        type: integer
                    type: array
                profileFields:
                    $ref: "#/components/schemas/UserProfileFields"
                private:
                    description: Is the profile visible to other users?
                    type: boolean
                    default: false
                banned:
                    description: Set the banned status of the user.
                    type: boolean
        UserPost:
            type: object
            properties:
                bypassSpam:
                    default: false
                    description: Should submissions from this user bypass SPAM checks?
                    type: boolean
                email:
                    description: Email address of the user.
                    minLength: 1
                    type: string
                showEmail:
                    description: Is the email address visible to other users?
                    type: boolean
                emailConfirmed:
                    default: true
                    description: Has the email address for this user been confirmed?
                    type: boolean
                sendWelcomeEmail:
                    default: true
                    description: Send welcome email?
                    type: boolean
                name:
                    description: Name of the user.
                    minLength: 1
                    type: string
                password:
                    description: Password of the user.
                    minLength: 1
                    type: string
                photo:
                    description: Raw photo field value from the user record.
                    minLength: 0
                    nullable: true
                    type: string
                roleID:
                    description: Roles to set on the user.
                    items:
                        type: integer
                    type: array
                private:
                    description: Is the profile visible to other users?
                    type: boolean
                    default: false
                profileFields:
                    $ref: "#/components/schemas/UserProfileFields"
            required:
                - name
                - email
                - password
                - emailConfirmed
                - bypassSpam
        UserBadges:
            type: object
            properties:
                badgeID:
                    description: ID of the badge.
                    type: integer
                name:
                    description: Name of the badge.
                    type: string
                photoUrl:
                    description: Badge photo.
                    type: string
                url:
                    description: URL to the badge photo.
                    type: string
                dateInserted:
                    description: Date the badge was awarded.
                    format: date-time
                    type: string
        UserProfileFields:
            type: object
            description: The user's profile fields.
        ReactedRecord:
            type: object
            properties:
                name:
                    description: The name of the record
                    type: string
                body:
                    description: The body of the record
                    type: string
                insertUserID:
                    description: The author of the record
                    type: integer
                dateUpdated:
                    format: date-time
                    type: string
                recordID:
                    type: integer
                recordType:
                    type: string
                    enum:
                        - Comment
                        - Discussion
                discussionID:
                    type: integer
                commentID:
                    type: integer
                url:
                    type: string
                insertUser:
                    $ref: "schemas.yml#/components/schemas/UserFragment"
                updateUser:
                    $ref: "schemas.yml#/components/schemas/UserFragment"
                reactions:
                    type: array
                    items:
                        $ref: "#/components/schemas/ReactionFragment"
            required:
                - name
                - body
                - insertUserID
                - recordID
                - recordType
                - discussionID
                - url
        ReactionFragment:
            type: object
            properties:
                tagID:
                    type: integer
                urlcode:
                    type: string
                name:
                    type: string
                class:
                    type: string
                count:
                    type: integer
        BulkRoleAssignment:
            type: object
            properties:
                userIDs:
                    type: array
                    items:
                        type: integer
                addRoleIDs:
                    type: array
                    items:
                        type: integer
                removeRoleIDs:
                    type: array
                    items:
                        type: integer
                addReplacementRoleID:
                    type: array
                    items:
                        type: integer
            required:
                - userIDs
