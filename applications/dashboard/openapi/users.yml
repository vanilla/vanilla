openapi: 3.0.2
info:
paths:
  /users:
    get:
      parameters:
      - description: >
          When the user was created.<br />

          This filter receive a string that can take two forms.<br />

          A single date that matches '{Operator}{DateTime}' where {Operator}
          can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to
          =.<br />

          A date range that matches '{Opening}{DateTime},{DateTime}{Closing}'
          where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'.
          '[]' are inclusive and '()' are exclusive.
        in: query
        name: dateInserted
        schema:
          format: date-filter
          type: string
      - description: >
          When the user was updated.<br />

          This filter receive a string that can take two forms.<br />

          A single date that matches '{Operator}{DateTime}' where {Operator}
          can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to
          =.<br />

          A date range that matches '{Opening}{DateTime},{DateTime}{Closing}'
          where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'.
          '[]' are inclusive and '()' are exclusive.
        in: query
        name: dateUpdated
        schema:
          format: date-filter
          type: string
      - description: |
          One or more user IDs to lookup.
        in: query
        name: userID
        schema:
          items:
            type: integer
          type: array
        style: form
        x-filter:
          field: u.UserID
      - description: |
          Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination">Pagination).
        in: query
        name: page
        schema:
          type: integer
          default: 1
          minimum: 1
      - description: |
          Desired number of items per page.
        in: query
        name: limit
        schema:
          type: integer
          default: 30
          maximum: 100
          minimum: 1
      - description: >
          Expand associated records using one or more valid field names. A
          value of "all" will expand all expandable fields.
        in: query
        name: expand
        schema:
          items:
            enum:
            - rank
            - all
            type: string
          type: array
        style: form
      responses:
        '200':
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Success
      tags:
      - Users
      summary: List users.
    post:
      responses:
        '201':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      summary: Add a user.
  /users/by-names:
    get:
      parameters:
      - description: >
          Filter for username. Supports full or partial matching with
          appended wildcard (e.g. User*).
        in: query
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      - description: >
          Sort method for results.<br />

          Must be one of: "countComments", "dateLastActive", "name",
          "mention".
        in: query
        name: order
        schema:
          type: string
          default: name
          enum:
          - countComments
          - dateLastActive
          - name
          - mention
      - description: |
          Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination">Pagination).
        in: query
        name: page
        schema:
          type: integer
          default: 1
          minimum: 1
      - description: |
          Desired number of items per page.
        in: query
        name: limit
        schema:
          type: integer
          default: 30
          maximum: 100
          minimum: 1
      responses:
        '200':
          content:
            'application/json':
              schema:
                items:
                  $ref: '../dashboard/schemas.yml#/components/schemas/UserFragment'
                type: array
          description: Success
      tags:
      - Users
      summary: Search for users by full or partial name matching.
  /users/me:
    get:
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '../dashboard/schemas.yml#/components/schemas/UserFragment'
          description: Success
      tags:
      - Users
      summary: Get information about the current user.
  /users/register:
    post:
      responses:
        '201':
          content:
            'application/json':
              schema:
                properties:
                  email:
                    description: Email address of the user.
                    minLength: 0
                    type: string
                  name:
                    description: Name of the user.
                    minLength: 1
                    type: string
                  userID:
                    description: ID of the user.
                    type: integer
                required:
                - userID
                - name
                - email
                type: object
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                discoveryText:
                  description: >-
                    Why does the user wish to join? Only used when the
                    registration is flagged as SPAM (response code: 202).
                  type: string
                email:
                  description: An email address for this user.
                  minLength: 1
                  type: string
                name:
                  description: The username.
                  minLength: 1
                  type: string
                password:
                  description: A password for this user.
                  minLength: 1
                  type: string
              required:
              - email
              - name
              - password
              type: object
        required: true
      summary: Submit a new user registration.
  /users/request-password:
    post:
      responses:
        '201':
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  description: The email/username of the user.
                  minLength: 1
                  type: string
              required:
              - email
              type: object
        required: true
  '/users/{id}':
    delete:
      parameters:
      - description: The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                deleteMethod:
                  type: string
                  default: delete
                  description: The deletion method / strategy.
                  enum:
                  - keep
                  - wipe
                  - delete
              type: object
        required: true
      summary: Delete a user.
    get:
      parameters:
      - description: |
          The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: >
          Expand associated records using one or more valid field names. A
          value of "all" will expand all expandable fields.
        in: query
        name: expand
        schema:
          items:
            enum:
            - rank
            - all
            type: string
          type: array
        style: form
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: Success
      tags:
      - Users
      summary: Get a user.
    patch:
      parameters:
      - description: The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
        required: true
      summary: Update a user.
  '/users/{id}/ban':
    put:
      parameters:
      - description: The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  banned:
                    description: The current banned value.
                    type: boolean
                required:
                - banned
                type: object
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                banned:
                  description: Pass true to ban or false to unban.
                  type: boolean
              required:
              - banned
              type: object
        required: true
      summary: Ban a user.
  '/users/{id}/confirm-email':
    post:
      parameters:
      - description: The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  email:
                    minLength: 1
                    type: string
                  emailConfirmed:
                    type: boolean
                  userID:
                    type: integer
                required:
                - userID
                - email
                - emailConfirmed
                type: object
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                confirmationCode:
                  description: Email confirmation code
                  minLength: 1
                  type: string
              required:
              - confirmationCode
              type: object
        required: true
      summary: Confirm a users current email address by using a confirmation code
  '/users/{id}/edit':
    get:
      parameters:
      - description: |
          The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: >
          Expand associated records using one or more valid field names. A
          value of "all" will expand all expandable fields.
        in: query
        name: expand
        schema:
          items:
            enum:
            - rank
            - all
            type: string
          type: array
        style: form
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  bypassSpam:
                    description: Should submissions from this user bypass SPAM checks?
                    type: boolean
                  email:
                    description: Email address of the user.
                    minLength: 0
                    type: string
                  emailConfirmed:
                    description: Has the email address for this user been confirmed?
                    type: boolean
                  name:
                    description: Name of the user.
                    minLength: 1
                    type: string
                  photo:
                    description: Raw photo field value from the user record.
                    minLength: 0
                    nullable: true
                    type: string
                  userID:
                    description: ID of the user.
                    type: integer
                required:
                - userID
                - name
                - email
                - photo
                - emailConfirmed
                - bypassSpam
                type: object
          description: Success
      tags:
      - Users
      summary: Get a user for editing.
  '/users/{id}/hidden':
    put:
      parameters:
      - description: The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  hidden:
                    description: Whether not the user is hidden from Online status.
                    type: boolean
                required:
                - hidden
                type: object
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                hidden:
                  description: Whether not the user should be hidden from Online status.
                  type: boolean
              required:
              - hidden
              type: object
        required: true
      summary: Adjust a user’s Online privacy.
  '/users/{id}/photo':
    delete:
      parameters:
      - description: |
          The user ID.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: >
          Expand associated records using one or more valid field names. A
          value of "all" will expand all expandable fields.
        in: query
        name: expand
        schema:
          items:
            enum:
            - rank
            - all
            type: string
          type: array
        style: form
      responses:
        '204':
          description: Success
      tags:
      - Users
      summary: Delete a user photo.
    post:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  photoUrl:
                    description: URL to the user photo.
                    minLength: 0
                    nullable: true
                    type: string
                required:
                - photoUrl
                type: object
          description: Success
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                photo:
                  type: string
                  format: binary
              required:
              - photo
              type: object
        required: true
  '/users/{id}/rank':
    x-addon: ranks
    put:
      summary: Update the rank of a user.
      tags:
      - Users
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                rankID:
                  description: ID of the user rank.
                  nullable: true
                  type: integer
              required:
              - rankID
              type: object
        required: true
      responses:
        '200':
          content:
            'application/json':
              schema:
                properties:
                  rankID:
                    description: ID of the user rank.
                    nullable: true
                    type: integer
                required:
                - rankID
                type: object
          description: Success
components:
  schemas:
    User:
      properties:
        banned:
          description: Is the user banned?
          type: integer
        bypassSpam:
          description: Should submissions from this user bypass SPAM checks?
          type: boolean
        dateInserted:
          description: When the user was created.
          format: date-time
          type: string
        dateLastActive:
          description: Time the user was last active.
          format: date-time
          nullable: true
          type: string
        dateUpdated:
          description: When the user was last updated.
          format: date-time
          nullable: true
          type: string
        email:
          description: Email address of the user.
          minLength: 0
          type: string
        emailConfirmed:
          description: Has the email address for this user been confirmed?
          type: boolean
        hidden:
          description: Is this user hiding their online status?
          type: boolean
        name:
          description: Name of the user.
          minLength: 1
          type: string
        photoUrl:
          description: URL to the user photo.
          minLength: 0
          nullable: true
          type: string
        rank:
          x-addon: ranks
          properties:
            name:
              description: Name of the rank.
              minLength: 1
              type: string
            rankID:
              description: Rank ID.
              type: integer
            userTitle:
              description: Label that will display beside the user.
              minLength: 1
              type: string
          required:
          - rankID
          - name
          - userTitle
          type: object
        rankID:
          x-addon: ranks
          description: ID of the user rank.
          nullable: true
          type: integer
        roles:
          items:
            $ref: 'schemas.yml#/components/schemas/RoleFragment'
          type: array
        showEmail:
          description: Is the email address visible to other users?
          type: boolean
        userID:
          description: ID of the user.
          type: integer
      required:
      - userID
      - name
      - email
      - photoUrl
      - emailConfirmed
      - showEmail
      - bypassSpam
      - banned
      - dateInserted
      - dateLastActive
      - dateUpdated
      type: object
    UserPatch:
      type: object
      properties:
        bypassSpam:
          description: Should submissions from this user bypass SPAM checks?
          type: boolean
        email:
          description: Email address of the user.
          minLength: 0
          type: string
        emailConfirmed:
          description: Has the email address for this user been confirmed?
          type: boolean
        name:
          description: Name of the user.
          minLength: 1
          type: string
        photo:
          description: Raw photo field value from the user record.
          minLength: 0
          nullable: true
          type: string
        roleID:
          description: Roles to set on the user.
          items:
            type: integer
          type: array
    UserPost:
      type: object
      properties:
        bypassSpam:
          default: false
          description: Should submissions from this user bypass SPAM checks?
          type: boolean
        email:
          description: Email address of the user.
          minLength: 1
          type: string
        emailConfirmed:
          default: true
          description: Has the email address for this user been confirmed?
          type: boolean
        name:
          description: Name of the user.
          minLength: 1
          type: string
        password:
          description: Password of the user.
          minLength: 1
          type: string
        photo:
          description: Raw photo field value from the user record.
          minLength: 0
          nullable: true
          type: string
        roleID:
          description: Roles to set on the user.
          items:
            type: integer
          type: array
      required:
      - name
      - email
      - password
      - emailConfirmed
      - bypassSpam
