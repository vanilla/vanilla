/// Grid system
//
// Generate semantic grid columns with these mixins.

@use "sass:math";

@mixin make-container($gutter: $grid-gutter-width) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($gutter * 0.5);
  padding-right: ($gutter * 0.5);
  @if not $enable-flex {
    @include clearfix();
  }
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
  width: calc(100% + #{$gutter});
  margin-left:  math.div($gutter, -2);
  margin-right: math.div($gutter, -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
  position: relative;
  @if not $enable-flex {
    float: left;
  }
  min-height: 1px;
  padding-left:  ($gutter * 0.5);
  padding-right: ($gutter * 0.5);
}

@mixin make-col-span($size, $columns: $grid-columns) {
  @if $enable-flex {
    flex: 0 0 percentage(math.div($size, $columns));
  } @else {
    width: percentage(math.div($size, $columns));
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage(math.div($size, $columns));
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage(math.div($size, $columns)), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage(math.div($size, $columns)), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}
