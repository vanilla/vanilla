input {
    file {
        path => "/var/log/nginx/access.log"
        start_position => "beginning"
        tags => ["nginx_access"]
    }
}


filter {
    if "nginx_access" in [tags] {

        # 172.27.0.1 dev.vanilla.localhost [25/Jan/2023:15:36:46 +0000] "GET /demo HTTP/1.1" 500 669 0.118 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.52" "-"
        grok {
            break_on_match => true
            match => {
                "message" => ["%{IP:[request][client_ip]} %{HOSTNAME:[request][hostname]} \[%{HTTPDATE:[request][timestamp]}\] \"%{WORD:[request][method]} %{DATA:[request][path]} HTTP/%{NUMBER:[request][http_version]}\" %{NUMBER:[request][response_code]} %{NUMBER:[request][sent_bytes]} %{NUMBER:[request][elapsed]} \"%{DATA:[request][referrer]}\" \"%{DATA:[request][user_agent]}\" \"%{DATA:[request][forwarded_for]}\""]
            }
            remove_field => "message"
            tag_on_failure => [ "_failure_match" ]
            add_tag => [ "_success_match" ]
        }
    }

    if "nginx_access" in [tags] and "_success_match" in [tags] {
        ruby {
            tag_on_exception => "_failure_elapsed_ms"
            code => 'event.set("[request][elapsed_ms]", event.get("[request][elapsed]").to_f * 1000)'
        }
        date {
            locale => "en"
            timezone => "UTC"
            match => [ "[request][timestamp]" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            tag_on_failure => "_failure_timestamp"
        }

        mutate {
            add_field => {
                "[@metadata][index_name]" => "nginx"
            }
        }
    }

}
