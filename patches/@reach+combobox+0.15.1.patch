diff --git a/node_modules/@reach/combobox/dist/reach-combobox.cjs.dev.js b/node_modules/@reach/combobox/dist/reach-combobox.cjs.dev.js
index 27d184c..bfcb582 100644
--- a/node_modules/@reach/combobox/dist/reach-combobox.cjs.dev.js
+++ b/node_modules/@reach/combobox/dist/reach-combobox.cjs.dev.js
@@ -13,7 +13,6 @@ var noop = require('@reach/utils/noop');
 var devUtils = require('@reach/utils/dev-utils');
 var composeRefs = require('@reach/utils/compose-refs');
 var useLazyRef = require('@reach/utils/use-lazy-ref');
-var useUpdateEffect = require('@reach/utils/use-update-effect');
 var composeEventHandlers = require('@reach/utils/compose-event-handlers');
 var descendants = require('@reach/descendants');
 var autoId = require('@reach/auto-id');
@@ -244,11 +243,12 @@ var INTERACTING = "INTERACTING"; ///////////////////////////////////////////////
 
 var CLEAR = "CLEAR"; // User is typing
 
-var CHANGE = "CHANGE"; // Initial input value change handler for syncing user state with state machine
-// Prevents initial change from sending the user to the NAVIGATING state
+var CHANGE = "CHANGE"; // Any input change that is not triggered by an actual onChange event.
+// For example an initial value or a controlled value that was changed.
+// Prevents sending the user to the NAVIGATING state
 // https://github.com/reach/reach-ui/issues/464
 
-var INITIAL_CHANGE = "INITIAL_CHANGE"; // User is navigating w/ the keyboard
+var SIMULATED_CHANGE = "SIMULATED_CHANGE"; // User is navigating w/ the keyboard
 
 var NAVIGATE = "NAVIGATE"; // User can be navigating with keyboard and then click instead, we want the
 // value from the click, not the current nav item
@@ -267,7 +267,7 @@ var CLOSE_WITH_BUTTON = "CLOSE_WITH_BUTTON"; ///////////////////////////////////
 var stateChart = {
   initial: IDLE,
   states: (_states = {}, _states[IDLE] = {
-    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[INITIAL_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
+    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[SIMULATED_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
   }, _states[SUGGESTING] = {
     on: (_on2 = {}, _on2[CHANGE] = SUGGESTING, _on2[FOCUS] = SUGGESTING, _on2[NAVIGATE] = NAVIGATING, _on2[CLEAR] = IDLE, _on2[ESCAPE] = IDLE, _on2[BLUR] = IDLE, _on2[SELECT_WITH_CLICK] = IDLE, _on2[INTERACT] = INTERACTING, _on2[CLOSE_WITH_BUTTON] = IDLE, _on2)
   }, _states[NAVIGATING] = {
@@ -284,7 +284,7 @@ var reducer = function reducer(data, event) {
 
   switch (event.type) {
     case CHANGE:
-    case INITIAL_CHANGE:
+    case SIMULATED_CHANGE:
       return _extends({}, nextState, {
         navigationValue: null,
         value: event.value
@@ -493,13 +493,8 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
       props = _objectWithoutPropertiesLoose(_ref2, ["as", "selectOnClick", "autocomplete", "onClick", "onChange", "onKeyDown", "onBlur", "onFocus", "value"]);
 
   // https://github.com/reach/reach-ui/issues/464
-  var _React$useRef = React.useRef(controlledValue),
-      initialControlledValue = _React$useRef.current;
-
-  var controlledValueChangedRef = React.useRef(false);
-  useUpdateEffect.useUpdateEffect(function () {
-    controlledValueChangedRef.current = true;
-  }, [controlledValue]);
+  // https://github.com/reach/reach-ui/issues/755
+  var inputValueChangedRef = React.useRef(false);
 
   var _React$useContext = React.useContext(ComboboxContext),
       _React$useContext$dat = _React$useContext.data,
@@ -533,8 +528,8 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
   var handleValueChange = React.useCallback(function (value) {
     if (value.trim() === "") {
       transition(CLEAR);
-    } else if (value === initialControlledValue && !controlledValueChangedRef.current) {
-      transition(INITIAL_CHANGE, {
+    } else if (!inputValueChangedRef.current) {
+      transition(SIMULATED_CHANGE, {
         value: value
       });
     } else {
@@ -542,7 +537,7 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
         value: value
       });
     }
-  }, [initialControlledValue, transition]);
+  }, [transition]);
   React.useEffect(function () {
     // If they are controlling the value we still need to do our transitions,
     // so  we have this derived state to emulate onChange of the input as we
@@ -550,13 +545,18 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
     if (isControlled && controlledValue !== value && ( // https://github.com/reach/reach-ui/issues/481
     controlledValue.trim() === "" ? (value || "").trim() !== "" : true)) {
       handleValueChange(controlledValue);
-    }
+    } // After we handled the changed value, we need to make sure the next
+    // controlled change won't trigger a CHANGE event. (instead of a SIMULATED_CHANGE)
+
+
+    inputValueChangedRef.current = false;
   }, [controlledValue, handleValueChange, isControlled, value]); // [*]... and when controlled, we don't trigger handleValueChange as the
   // user types, instead the developer controls it with the normal input
   // onChange prop
 
   function handleChange(event) {
     var value = event.target.value;
+    inputValueChangedRef.current = true;
 
     if (!isControlled) {
       handleValueChange(value);
diff --git a/node_modules/@reach/combobox/dist/reach-combobox.cjs.prod.js b/node_modules/@reach/combobox/dist/reach-combobox.cjs.prod.js
index f567096..6d376ae 100644
--- a/node_modules/@reach/combobox/dist/reach-combobox.cjs.prod.js
+++ b/node_modules/@reach/combobox/dist/reach-combobox.cjs.prod.js
@@ -13,7 +13,6 @@ var noop = require('@reach/utils/noop');
 var devUtils = require('@reach/utils/dev-utils');
 var composeRefs = require('@reach/utils/compose-refs');
 var useLazyRef = require('@reach/utils/use-lazy-ref');
-var useUpdateEffect = require('@reach/utils/use-update-effect');
 var composeEventHandlers = require('@reach/utils/compose-event-handlers');
 var descendants = require('@reach/descendants');
 var autoId = require('@reach/auto-id');
@@ -240,11 +239,12 @@ var INTERACTING = "INTERACTING"; ///////////////////////////////////////////////
 
 var CLEAR = "CLEAR"; // User is typing
 
-var CHANGE = "CHANGE"; // Initial input value change handler for syncing user state with state machine
-// Prevents initial change from sending the user to the NAVIGATING state
+var CHANGE = "CHANGE"; // Any input change that is not triggered by an actual onChange event.
+// For example an initial value or a controlled value that was changed.
+// Prevents sending the user to the NAVIGATING state
 // https://github.com/reach/reach-ui/issues/464
 
-var INITIAL_CHANGE = "INITIAL_CHANGE"; // User is navigating w/ the keyboard
+var SIMULATED_CHANGE = "SIMULATED_CHANGE"; // User is navigating w/ the keyboard
 
 var NAVIGATE = "NAVIGATE"; // User can be navigating with keyboard and then click instead, we want the
 // value from the click, not the current nav item
@@ -263,7 +263,7 @@ var CLOSE_WITH_BUTTON = "CLOSE_WITH_BUTTON"; ///////////////////////////////////
 var stateChart = {
   initial: IDLE,
   states: (_states = {}, _states[IDLE] = {
-    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[INITIAL_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
+    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[SIMULATED_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
   }, _states[SUGGESTING] = {
     on: (_on2 = {}, _on2[CHANGE] = SUGGESTING, _on2[FOCUS] = SUGGESTING, _on2[NAVIGATE] = NAVIGATING, _on2[CLEAR] = IDLE, _on2[ESCAPE] = IDLE, _on2[BLUR] = IDLE, _on2[SELECT_WITH_CLICK] = IDLE, _on2[INTERACT] = INTERACTING, _on2[CLOSE_WITH_BUTTON] = IDLE, _on2)
   }, _states[NAVIGATING] = {
@@ -280,7 +280,7 @@ var reducer = function reducer(data, event) {
 
   switch (event.type) {
     case CHANGE:
-    case INITIAL_CHANGE:
+    case SIMULATED_CHANGE:
       return _extends({}, nextState, {
         navigationValue: null,
         value: event.value
@@ -477,13 +477,8 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
       props = _objectWithoutPropertiesLoose(_ref2, ["as", "selectOnClick", "autocomplete", "onClick", "onChange", "onKeyDown", "onBlur", "onFocus", "value"]);
 
   // https://github.com/reach/reach-ui/issues/464
-  var _React$useRef = React.useRef(controlledValue),
-      initialControlledValue = _React$useRef.current;
-
-  var controlledValueChangedRef = React.useRef(false);
-  useUpdateEffect.useUpdateEffect(function () {
-    controlledValueChangedRef.current = true;
-  }, [controlledValue]);
+  // https://github.com/reach/reach-ui/issues/755
+  var inputValueChangedRef = React.useRef(false);
 
   var _React$useContext = React.useContext(ComboboxContext),
       _React$useContext$dat = _React$useContext.data,
@@ -517,8 +512,8 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
   var handleValueChange = React.useCallback(function (value) {
     if (value.trim() === "") {
       transition(CLEAR);
-    } else if (value === initialControlledValue && !controlledValueChangedRef.current) {
-      transition(INITIAL_CHANGE, {
+    } else if (!inputValueChangedRef.current) {
+      transition(SIMULATED_CHANGE, {
         value: value
       });
     } else {
@@ -526,7 +521,7 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
         value: value
       });
     }
-  }, [initialControlledValue, transition]);
+  }, [transition]);
   React.useEffect(function () {
     // If they are controlling the value we still need to do our transitions,
     // so  we have this derived state to emulate onChange of the input as we
@@ -534,13 +529,18 @@ var ComboboxInput = /*#__PURE__*/React.forwardRef(function ComboboxInput(_ref2,
     if (isControlled && controlledValue !== value && ( // https://github.com/reach/reach-ui/issues/481
     controlledValue.trim() === "" ? (value || "").trim() !== "" : true)) {
       handleValueChange(controlledValue);
-    }
+    } // After we handled the changed value, we need to make sure the next
+    // controlled change won't trigger a CHANGE event. (instead of a SIMULATED_CHANGE)
+
+
+    inputValueChangedRef.current = false;
   }, [controlledValue, handleValueChange, isControlled, value]); // [*]... and when controlled, we don't trigger handleValueChange as the
   // user types, instead the developer controls it with the normal input
   // onChange prop
 
   function handleChange(event) {
     var value = event.target.value;
+    inputValueChangedRef.current = true;
 
     if (!isControlled) {
       handleValueChange(value);
diff --git a/node_modules/@reach/combobox/dist/reach-combobox.esm.js b/node_modules/@reach/combobox/dist/reach-combobox.esm.js
index 04e19b1..c8fb1f5 100644
--- a/node_modules/@reach/combobox/dist/reach-combobox.esm.js
+++ b/node_modules/@reach/combobox/dist/reach-combobox.esm.js
@@ -9,7 +9,6 @@ import { noop } from '@reach/utils/noop';
 import { useCheckStyles } from '@reach/utils/dev-utils';
 import { useComposedRefs } from '@reach/utils/compose-refs';
 import { useLazyRef } from '@reach/utils/use-lazy-ref';
-import { useUpdateEffect } from '@reach/utils/use-update-effect';
 import { composeEventHandlers } from '@reach/utils/compose-event-handlers';
 import { createDescendantContext, useDescendantsInit, DescendantProvider, useDescendant, useDescendants } from '@reach/descendants';
 import { useId } from '@reach/auto-id';
@@ -236,11 +235,12 @@ var INTERACTING = "INTERACTING"; ///////////////////////////////////////////////
 
 var CLEAR = "CLEAR"; // User is typing
 
-var CHANGE = "CHANGE"; // Initial input value change handler for syncing user state with state machine
-// Prevents initial change from sending the user to the NAVIGATING state
+var CHANGE = "CHANGE"; // Any input change that is not triggered by an actual onChange event.
+// For example an initial value or a controlled value that was changed.
+// Prevents sending the user to the NAVIGATING state
 // https://github.com/reach/reach-ui/issues/464
 
-var INITIAL_CHANGE = "INITIAL_CHANGE"; // User is navigating w/ the keyboard
+var SIMULATED_CHANGE = "SIMULATED_CHANGE"; // User is navigating w/ the keyboard
 
 var NAVIGATE = "NAVIGATE"; // User can be navigating with keyboard and then click instead, we want the
 // value from the click, not the current nav item
@@ -259,7 +259,7 @@ var CLOSE_WITH_BUTTON = "CLOSE_WITH_BUTTON"; ///////////////////////////////////
 var stateChart = {
   initial: IDLE,
   states: (_states = {}, _states[IDLE] = {
-    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[INITIAL_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
+    on: (_on = {}, _on[BLUR] = IDLE, _on[CLEAR] = IDLE, _on[CHANGE] = SUGGESTING, _on[SIMULATED_CHANGE] = IDLE, _on[FOCUS] = SUGGESTING, _on[NAVIGATE] = NAVIGATING, _on[OPEN_WITH_BUTTON] = SUGGESTING, _on)
   }, _states[SUGGESTING] = {
     on: (_on2 = {}, _on2[CHANGE] = SUGGESTING, _on2[FOCUS] = SUGGESTING, _on2[NAVIGATE] = NAVIGATING, _on2[CLEAR] = IDLE, _on2[ESCAPE] = IDLE, _on2[BLUR] = IDLE, _on2[SELECT_WITH_CLICK] = IDLE, _on2[INTERACT] = INTERACTING, _on2[CLOSE_WITH_BUTTON] = IDLE, _on2)
   }, _states[NAVIGATING] = {
@@ -276,7 +276,7 @@ var reducer = function reducer(data, event) {
 
   switch (event.type) {
     case CHANGE:
-    case INITIAL_CHANGE:
+    case SIMULATED_CHANGE:
       return _extends({}, nextState, {
         navigationValue: null,
         value: event.value
@@ -485,13 +485,8 @@ var ComboboxInput = /*#__PURE__*/forwardRef(function ComboboxInput(_ref2, forwar
       props = _objectWithoutPropertiesLoose(_ref2, ["as", "selectOnClick", "autocomplete", "onClick", "onChange", "onKeyDown", "onBlur", "onFocus", "value"]);
 
   // https://github.com/reach/reach-ui/issues/464
-  var _React$useRef = useRef(controlledValue),
-      initialControlledValue = _React$useRef.current;
-
-  var controlledValueChangedRef = useRef(false);
-  useUpdateEffect(function () {
-    controlledValueChangedRef.current = true;
-  }, [controlledValue]);
+  // https://github.com/reach/reach-ui/issues/755
+  var inputValueChangedRef = useRef(false);
 
   var _React$useContext = useContext(ComboboxContext),
       _React$useContext$dat = _React$useContext.data,
@@ -525,8 +520,8 @@ var ComboboxInput = /*#__PURE__*/forwardRef(function ComboboxInput(_ref2, forwar
   var handleValueChange = useCallback(function (value) {
     if (value.trim() === "") {
       transition(CLEAR);
-    } else if (value === initialControlledValue && !controlledValueChangedRef.current) {
-      transition(INITIAL_CHANGE, {
+    } else if (!inputValueChangedRef.current) {
+      transition(SIMULATED_CHANGE, {
         value: value
       });
     } else {
@@ -534,7 +529,7 @@ var ComboboxInput = /*#__PURE__*/forwardRef(function ComboboxInput(_ref2, forwar
         value: value
       });
     }
-  }, [initialControlledValue, transition]);
+  }, [transition]);
   useEffect(function () {
     // If they are controlling the value we still need to do our transitions,
     // so  we have this derived state to emulate onChange of the input as we
@@ -542,13 +537,18 @@ var ComboboxInput = /*#__PURE__*/forwardRef(function ComboboxInput(_ref2, forwar
     if (isControlled && controlledValue !== value && ( // https://github.com/reach/reach-ui/issues/481
     controlledValue.trim() === "" ? (value || "").trim() !== "" : true)) {
       handleValueChange(controlledValue);
-    }
+    } // After we handled the changed value, we need to make sure the next
+    // controlled change won't trigger a CHANGE event. (instead of a SIMULATED_CHANGE)
+
+
+    inputValueChangedRef.current = false;
   }, [controlledValue, handleValueChange, isControlled, value]); // [*]... and when controlled, we don't trigger handleValueChange as the
   // user types, instead the developer controls it with the normal input
   // onChange prop
 
   function handleChange(event) {
     var value = event.target.value;
+    inputValueChangedRef.current = true;
 
     if (!isControlled) {
       handleValueChange(value);
